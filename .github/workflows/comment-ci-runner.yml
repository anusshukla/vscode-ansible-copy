---
name: comment-ci-runner

on:
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        type: string
      pr_number:
        description: 'PR number'
        required: false
        type: string
      pr_repo:
        description: 'PR repository'
        required: false
        type: string
      pr_ref:
        description: 'PR ref'
        required: false
        type: string
      pr_sha:
        description: 'PR SHA'
        required: false
        type: string

env:
  FORCE_COLOR: "1"
  MISE_ENV: ci
  PRETTIER_LEGACY_CLI: "1"
  WSLENV: HOSTNAME:CI:FORCE_COLOR:GITHUB_ACTION:GITHUB_ACTION_PATH/p:GITHUB_ACTION_REPOSITORY:GITHUB_WORKFLOW:GITHUB_WORKSPACE/p:GITHUB_PATH/p:GITHUB_ENV/p:VIRTUAL_ENV/p:SKIP_PODMAN:SKIP_DOCKER:NODE_OPTIONS:MISE_ENV
  HOSTNAME: gha

jobs:
  build:
    name: ${{ inputs.task }}
    environment: ci
    env:
      SKIP_DOCKER: ${{ (inputs.task == 'lint' || inputs.task == 'unit' || inputs.task == 'ui' || inputs.task == 'e2e' || inputs.task == 'als' || inputs.task == 'docs') && 1 || 0 }}
      SKIP_PODMAN: ${{ (inputs.task == 'lint' || inputs.task == 'unit' || inputs.task == 'ui' || inputs.task == 'e2e' || inputs.task == 'als' || inputs.task == 'docs') && 1 || 0 }}
      NODE_OPTIONS: --max-old-space-size=8192
      TASKFILE_ARGS: --output=group --output-group-begin='::group::{{.TASK}}' --output-group-end='::endgroup::'
    
    defaults:
      run:
        shell: bash
    
    runs-on: ubuntu-24.04
    
    permissions:
      contents: read
      id-token: write
      checks: read
    
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          show-progress: false

      - name: Install dependencies with mise
        timeout-minutes: 15
        uses: jdx/mise-action@3460d6e58b5c6f0277b8a5184fd0f1f0ef14b5b0 # v2024.9.0
        
      - name: task setup
        timeout-minutes: 25
        run: task setup
        id: setup

      - name: task package
        id: package
        run: |
          task package ${{ env.TASKFILE_ARGS }}

      - name: configure podman
        if: inputs.task == 'test'
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          mkdir -p ~/.config/containers
          cat <<EOT >> ~/.config/containers/containers.conf
          [engine]
          cgroup_manager="cgroupfs"
          EOT
          podman info

      - name: Run lint task
        if: inputs.task == 'lint'
        run: task lint ${{ env.TASKFILE_ARGS }}

      - name: Run docs task
        if: inputs.task == 'docs'
        run: task docs ${{ env.TASKFILE_ARGS }}

      - name: Run unit tests
        if: inputs.task == 'unit'
        run: task unit ${{ env.TASKFILE_ARGS }}

      - name: Run ui tests
        if: inputs.task == 'ui'
        run: task ui ${{ env.TASKFILE_ARGS }}

      - name: Run e2e tests
        if: inputs.task == 'e2e'
        run: task e2e ${{ env.TASKFILE_ARGS }}

      - name: Run als tests
        if: inputs.task == 'als'
        run: task als ${{ env.TASKFILE_ARGS }}

      # For test task, run all test types
      - name: Run unit tests (full test suite)
        if: inputs.task == 'test'
        run: task unit ${{ env.TASKFILE_ARGS }}

      - name: Run ui tests (full test suite)
        if: inputs.task == 'test'
        run: task ui ${{ env.TASKFILE_ARGS }}

      - name: Run e2e tests (full test suite)
        if: inputs.task == 'test'
        run: task e2e ${{ env.TASKFILE_ARGS }}

      - name: Run als tests (full test suite)
        if: inputs.task == 'test'
        run: task als ${{ env.TASKFILE_ARGS }}

      - name: Upload vsix artifact
        if: always()
        uses: actions/upload-artifact@01e3fcfb95b4f4a52e10f30bc9c8966400a487b6 # v4
        with:
          name: ${{ inputs.task }}
          path: "*.vsix"
          if-no-files-found: ignore

      - name: Generate coverage report
        if: inputs.task == 'test' && !cancelled()
        run: task ci:coverage:merge ${{ env.TASKFILE_ARGS }}

      - name: Upload coverage reports to Codecov
        if: inputs.task == 'test' && !cancelled()
        uses: codecov/codecov-action@8f9c632e56c36c32b3e415d34198e3fb1f714771 # v5
        with:
          files: ./coverage/coverage-final.json
          flags: ${{ inputs.task }}
          fail_ci_if_error: false
