---
name: comment-triggered-ci

on:
  issue_comment:
    types: [created, edited]

jobs:
  parse-comment:
    if: |
      github.event.comment.body != '' &&
      startsWith(github.event.comment.body, '@ci run') &&
      (github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      actions: write
    steps:
      - name: Parse comment
        id: parse
        run: |
          comment="${{ github.event.comment.body }}"
          echo "Comment: $comment"

          # Extract task from comment
          # Expected format: @ci run <task>
          task=$(echo "$comment" | sed -n 's/.*@ci run \([a-z:]*\).*/\1/p' | tr -d '[:space:]')

          # Whitelist of allowed tasks
          allowed_tasks="docs|lint|test|unit|ui|e2e|als"

          if [[ ! "$task" =~ ^($allowed_tasks)$ ]]; then
            echo "❌ Invalid task: '$task'. Allowed tasks: docs, lint, test, unit, ui, e2e, als"
            echo "task=" >> $GITHUB_OUTPUT
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "error=Invalid task. Allowed tasks are: docs, lint, test, unit, ui, e2e, als" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Valid task: $task"
          echo "task=$task" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT

      - name: Get PR information
        if: steps.parse.outputs.valid == 'true'
        id: pr_info
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            
            // Fetch PR details using the API
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            console.log(`PR Number: ${prNumber}`);
            console.log(`PR Repo: ${pr.head.repo.full_name}`);
            console.log(`PR Ref: ${pr.head.ref}`);
            console.log(`PR SHA: ${pr.head.sha}`);

            core.setOutput('pr_number', prNumber);
            core.setOutput('pr_repo', pr.head.repo.full_name);
            core.setOutput('pr_ref', pr.head.ref);
            core.setOutput('pr_sha', pr.head.sha);

      - name: Post comment acknowledging request
        if: steps.parse.outputs.valid == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const task = '${{ steps.parse.outputs.task }}';
            const actor = '${{ github.actor }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ @${actor} CI run for task **${task}** accepted. Starting workflow...`
            });

      - name: Trigger workflow via API
        if: steps.parse.outputs.valid == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the default branch for workflow dispatch
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Trigger the comment-ci-runner workflow on the default branch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'comment-ci-runner.yml',
              ref: repo.default_branch,
              inputs: {
                task: '${{ steps.parse.outputs.task }}',
                pr_number: '${{ steps.pr_info.outputs.pr_number }}',
                pr_repo: '${{ steps.pr_info.outputs.pr_repo }}',
                pr_ref: '${{ steps.pr_info.outputs.pr_ref }}',
                pr_sha: '${{ steps.pr_info.outputs.pr_sha }}'
              }
            });

      - name: Post comment on error
        if: steps.parse.outputs.valid != 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error = '${{ steps.parse.outputs.error }}';
            const actor = '${{ github.actor }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ @${actor} ${error}`
            });
